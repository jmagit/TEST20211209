<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="b974eeee-08d5-43f3-871d-bc6af2218029" activeEnvironment="Default" name="Contactos" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="8a3dfd62-4c57-475f-8337-ed47cc400625" wadlVersion="http://wadl.dev.java.net/2009/02" name="Microservicio-Contactos" type="rest" basePath="/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Ejemplo de Microservicio utilizando la base de datos **mongodb**.</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>${#Project#urlbase}</con:endpoint><con:endpoint>http://JAVIER-LAPTOP:8089</con:endpoint><con:endpoint>http://JAVIER-LAPTOP:8089/</con:endpoint><con:endpoint>http://localhost:8008</con:endpoint></con:endpoints><con:resource name="/api/contactos" path="/api/contactos" id="f6823792-3097-4c73-86b3-22a6fbec6936"><con:settings/><con:parameters/><con:method name="getAllUsingGET" id="297d3bba-9117-4383-a8cb-d7e6fbb8affd" method="GET"><con:description>
Listar todos</con:description><con:settings/><con:parameters><con:parameter><con:name>_page</con:name><con:style>QUERY</con:style><con:description>_page</con:description></con:parameter><con:parameter><con:name>_rows</con:name><con:value>5</con:value><con:style>QUERY</con:style><con:default>5</con:default><con:description>_rows</con:description></con:parameter><con:parameter><con:name>_sort</con:name><con:style>QUERY</con:style><con:description>_sort</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>406</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>406</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>406</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>406</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>406</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>406</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="76e106f0-6cbb-4025-bf70-432533689975" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Accept" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#urlbase}</con:endpoint><con:request/><con:originalUri>http://localhost//api/contactos</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="_page" value="2"/>
  <con:entry key="_rows" value="5"/>
</con:parameters></con:request><con:request name="2" id="2fe7effa-a6f7-4e9f-92f3-0235b35d88c1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#urlbase}</con:endpoint><con:request/><con:originalUri>http://JAVIER-LAPTOP//api/contactos</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="_rows" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="addUsingPOST" id="1177e0a2-2ec1-4295-87f3-3a20961252a8" method="POST"><con:description>
add</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="c891e39c-fdfd-4085-b103-471ab901cb28" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#urlbase}</con:endpoint><con:request>{
   "id": 666,
   "tratamiento": "Sr.",
   "nombre": "Pepito",
   "apellidos": "Grillo",
   "telefono": "846054444",
   "email": "mjerrans0@de.vu",
   "sexo": "M",
   "nacimiento": "1973-07-09",
   "avatar": "https://randomuser.me/api/portraits/women/1.jpg",
   "conflictivo": false
}</con:request><con:originalUri>http://localhost//api/contactos</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="/api/contactos/{id}" path="/api/contactos/{id}" id="82251f8d-532e-4851-8933-4952f3d37054"><con:settings/><con:parameters/><con:method name="getOneUsingGET" id="d1d9be1a-6037-4213-b936-c4616efdd01c" method="GET"><con:description>
getOne</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>id</con:name><con:style>TEMPLATE</con:style><con:description>id</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="47886dce-5e11-4d85-a800-b6a8b5f3ace5" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8008</con:endpoint><con:request/><con:originalUri>http://localhost//api/contactos/1</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="999" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="modifyUsingPUT" id="ebc84fe8-f8fb-497c-93df-1e7bfd6f833b" method="PUT"><con:description>
modify</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>id</con:name><con:style>TEMPLATE</con:style><con:description>id</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400 404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="d89d75cc-0e26-4cb5-bc3a-e5dd20be4900" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8008</con:endpoint><con:request>{
   "id": 111,
   "tratamiento": "Sr.",
   "nombre": "PEPITO",
   "apellidos": "GRILLO",
   "telefono": "846054444",
   "email": "mjerrans0@de.vu",
   "sexo": "M",
   "nacimiento": "1973-07-09",
   "avatar": "https://randomuser.me/api/portraits/women/1.jpg",
   "conflictivo": false
}</con:request><con:originalUri>http://localhost//api/contactos/111</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="111" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method><con:method name="deleteUsingDELETE" id="a88d5df1-0fa3-450f-89e0-f0e8e72fd3db" method="DELETE"><con:description>
delete</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>id</con:name><con:style>TEMPLATE</con:style><con:description>id</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>403</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>204</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="b7a5e30a-066f-42f3-8158-5baeadaa38bf" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8008</con:endpoint><con:request/><con:originalUri>http://localhost//api/contactos/111</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="id" value="111" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:testSuite id="922203a4-9570-4893-8b3e-844806594b11" name="GetAll"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="61ab982b-c131-4889-a52d-cedec1a990e3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Sin paginar" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Peticion" id="3d417f77-a85f-49e2-963e-432b1355a4cf"><con:settings/><con:config service="Microservicio-Contactos" resourcePath="//api/contactos" methodName="getAllUsingGET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Peticion" id="2fe7effa-a6f7-4e9f-92f3-0235b35d88c1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://JAVIER-LAPTOP:8008</con:endpoint><con:request/><con:originalUri>http://JAVIER-LAPTOP//api/contactos</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9dd71fb1-0c48-44d4-8063-598ee5cb99e4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Schema Compliance" id="d98c00c4-8a43-4de6-a670-02d1fb19c957" name="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="JsonPath Count" id="faad8a94-ee95-45af-a081-d4f4345901d3" name="JsonPath Count"><con:configuration><path>$.[*]</path><content>111</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="Response SLA Assertion" id="54a20075-3a68-4a36-a882-925aeed5ef0d" name="Response SLA"><con:configuration><SLA>200</SLA></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="_rows" value="" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="a4543bf0-2db4-4ee0-94c1-08d7d435816b" port="8089" path="/" host="JAVIER-LAPTOP" name="Contactos Mock" docroot=""><con:settings/><con:properties/><con:restMockAction name="/api/contactos" method="GET" resourcePath="/api/contactos" id="12dff572-51b1-4113-a676-58aee37489f2"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7435746d-7e17-4273-8cbf-26096ecc5069" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
      {
      "id": 1,
      "tratamiento": "Sra.",
      "nombre": "Es de mentira",
      "apellidos": "Lockton Jerrans",
      "telefono": "846 054 444",
      "email": "mjerrans0@de.vu",
      "sexo": "M",
      "nacimiento": "1973-07-09",
      "avatar": "https://randomuser.me/api/portraits/women/1.jpg",
      "conflictivo": true
   },
      {
      "id": 3,
      "tratamiento": "Srta.",
      "nombre": "Gwenora",
      "apellidos": "Forrestor Fitzackerley",
      "telefono": "853 134 343",
      "email": "gfitzackerley1@opensource.org",
      "sexo": "M",
      "nacimiento": "1968-06-12",
      "avatar": "https://randomuser.me/api/portraits/women/2.jpg",
      "conflictivo": false
   },
      {
      "id": 5,
      "tratamiento": "Srta.",
      "nombre": "Henrieta",
      "apellidos": "Agney Hellen",
      "telefono": "453 237 936",
      "email": "hhellen2@fema.gov",
      "sexo": "M",
      "nacimiento": "1984-07-16",
      "avatar": "https://randomuser.me/api/portraits/women/3.jpg",
      "conflictivo": true
   },
      {
      "id": 7,
      "tratamiento": "Srta.",
      "nombre": "Hermione",
      "apellidos": "Sawdy Larchier",
      "telefono": "977 058 903",
      "email": "hlarchier3@weather.com",
      "sexo": "M",
      "nacimiento": "1975-09-21",
      "avatar": "https://randomuser.me/api/portraits/women/4.jpg",
      "conflictivo": false
   },
      {
      "id": 9,
      "tratamiento": "Srta.",
      "nombre": "Alisha",
      "apellidos": "Passion Cortes",
      "telefono": "561 086 430",
      "email": "acortes4@google.com.hk",
      "sexo": "M",
      "nacimiento": "1977-07-21",
      "avatar": "https://randomuser.me/api/portraits/women/5.jpg",
      "conflictivo": false
   }
]</con:responseContent></con:response><con:response name="Response 2" id="9c640863-4579-43fb-8526-0774c0d9bd05" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
      {
      "id": 11,
      "tratamiento": "Ilma.",
      "nombre": "Lexi",
      "apellidos": "Goodanew Danskine",
      "telefono": "569 837 652",
      "email": "ldanskine5@nifty.com",
      "sexo": "M",
      "nacimiento": "1964-09-08",
      "avatar": "https://randomuser.me/api/portraits/women/6.jpg",
      "conflictivo": false
   },
      {
      "id": 13,
      "tratamiento": "Ilma.",
      "nombre": "Stefanie",
      "apellidos": "Merrisson Syrie",
      "telefono": "671 215 036",
      "email": "ssyrie6@chronoengine.com",
      "sexo": "M",
      "nacimiento": "1965-02-12",
      "avatar": "https://randomuser.me/api/portraits/women/7.jpg",
      "conflictivo": true
   },
      {
      "id": 15,
      "tratamiento": "Ilma.",
      "nombre": "Jessika",
      "apellidos": "Antusch Ilyuchyov",
      "telefono": "627 415 908",
      "email": "jilyuchyov7@washington.edu",
      "sexo": "M",
      "nacimiento": "1977-01-27",
      "avatar": "https://randomuser.me/api/portraits/women/8.jpg",
      "conflictivo": false
   },
      {
      "id": 17,
      "tratamiento": "Ilma.",
      "nombre": "Bettye",
      "apellidos": "Etienne McGlynn",
      "telefono": "519 431 038",
      "email": "bmcglynn8@amazonaws.com",
      "sexo": "M",
      "nacimiento": "1974-05-25",
      "avatar": "https://randomuser.me/api/portraits/women/9.jpg",
      "conflictivo": true
   },
      {
      "id": 19,
      "tratamiento": "Sra.",
      "nombre": "Melantha",
      "apellidos": "Jopling Chomley",
      "telefono": "002 396 521",
      "email": "mchomley9@cbc.ca",
      "sexo": "M",
      "nacimiento": "1981-10-21",
      "avatar": "https://randomuser.me/api/portraits/women/10.jpg",
      "conflictivo": false
   }
]</con:responseContent></con:response><con:response name="Response 3" id="b56c9c77-8e8f-4174-aa34-3c2130afc6c9" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>[
      {
      "id": 21,
      "tratamiento": "Srta.",
      "nombre": "Reena",
      "apellidos": "Punch Offill",
      "telefono": "954 377 551",
      "email": "roffilla@theatlantic.com",
      "sexo": "M",
      "nacimiento": "1961-02-11",
      "avatar": "https://randomuser.me/api/portraits/women/11.jpg",
      "conflictivo": true
   },
      {
      "id": 23,
      "tratamiento": "Sra.",
      "nombre": "Lynna",
      "apellidos": "Arundell Spyby",
      "telefono": "124 812 921",
      "email": "lspybyb@diigo.com",
      "sexo": "M",
      "nacimiento": "1998-02-22",
      "avatar": "https://randomuser.me/api/portraits/women/12.jpg",
      "conflictivo": true
   },
      {
      "id": 25,
      "tratamiento": "Sra.",
      "nombre": "Lara",
      "apellidos": "Sparway Kime",
      "telefono": "057 470 072",
      "email": "lkimec@nsw.gov.au",
      "sexo": "M",
      "nacimiento": "1990-01-18",
      "avatar": "https://randomuser.me/api/portraits/women/13.jpg",
      "conflictivo": false
   },
      {
      "id": 27,
      "tratamiento": "Sra.",
      "nombre": "Antonie",
      "apellidos": "Hasted Boyland",
      "telefono": "379 266 406",
      "email": "aboylandd@ftc.gov",
      "sexo": "M",
      "nacimiento": "1996-01-05",
      "avatar": "https://randomuser.me/api/portraits/women/14.jpg",
      "conflictivo": false
   },
      {
      "id": 29,
      "tratamiento": "Dra.",
      "nombre": "Jaquenette",
      "apellidos": "Papierz Jewster",
      "telefono": "586 675 364",
      "email": "jjewstere@si.edu",
      "sexo": "M",
      "nacimiento": "1972-04-13",
      "avatar": "https://randomuser.me/api/portraits/women/15.jpg",
      "conflictivo": false
   }
]</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/contactos" method="POST" resourcePath="//api/contactos" id="a69b32c7-4ada-4fc3-93e7-6dce15398143"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="612fbfae-df75-44fa-9274-e5a6b349868b" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/api/contactos/1" method="GET" resourcePath="/api/contactos/1" id="9631cbe5-2e0b-4d29-9127-9b713ad98876"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="e614b1fd-63cc-407a-97a7-6f12d132c648" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
   "id": 666,
   "tratamiento": "Sr.",
   "nombre": "Pepito",
   "apellidos": "Grillo",
   "telefono": "846054444",
   "email": "mjerrans0@de.vu",
   "sexo": "M",
   "nacimiento": "1973-07-09",
   "avatar": "https://randomuser.me/api/portraits/women/1.jpg",
   "conflictivo": false
}</con:responseContent></con:response><con:response name="Response 2" id="bb8a4e74-3069-4640-9edd-21f70813ad81" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
   "id": 1,
   "tratamiento": "Sra.",
   "nombre": "Marline",
   "apellidos": "Lockton Jerrans",
   "telefono": "846 054 444",
   "email": "mjerrans0@de.vu",
   "sexo": "M",
   "nacimiento": "1973-07-09",
   "avatar": "https://randomuser.me/api/portraits/women/1.jpg",
   "conflictivo": true
}</con:responseContent></con:response><con:response name="Response 3" id="eb10bc0d-316f-469f-bf04-ff4cd151e1bf" httpResponseStatus="404" mediaType="application/json"><con:settings/><con:responseContent>{
   "error": "Not found",
   "message": "/api/contactos/999"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/api/contactos/" method="PUT" resourcePath="/api/contactos/" id="aed4c783-b044-4835-a4e9-1be28a9ac1a1"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="7dfb13dc-c2bb-4622-93f2-5ee35edaf627" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="/api/contactos/" method="DELETE" resourcePath="//api/contactos/" id="c652fdcc-f97d-403f-bbc1-2739421bcbbf"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="c9a6a407-14f6-4ec4-9edd-a78ee6dcf371" httpResponseStatus="204"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="//api/contactos/2" method="GET" resourcePath="//api/contactos/2" id="5149c45f-52e6-43b7-98b8-23a5d141e04c"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="095cfe4f-759d-4a82-82d3-e9586dae7078" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"id":2,"tratamiento":"Sr.","nombre":"Beale","apellidos":"Knibb Koppe","telefono":"093 804 977","email":"bkoppe0@apache.org","sexo":"H","nacimiento":"1995-11-22","avatar":"https://randomuser.me/api/portraits/men/1.jpg","conflictivo":false}</con:responseContent><con:header><con:name>Transfer-Encoding</con:name><con:value>chunked</con:value></con:header><con:header><con:name>Keep-Alive</con:name><con:value>timeout=60</con:value></con:header><con:header><con:name>X-Content-Type-Options</con:name><con:value>nosniff</con:value></con:header><con:header><con:name>Connection</con:name><con:value>keep-alive</con:value></con:header><con:header><con:name>Pragma</con:name><con:value>no-cache</con:value></con:header><con:header><con:name>Date</con:name><con:value>Wed, 15 Dec 2021 12:00:55 GMT</con:value></con:header><con:header><con:name>X-Frame-Options</con:name><con:value>DENY</con:value></con:header><con:header><con:name>Cache-Control</con:name><con:value>no-cache, no-store, max-age=0, must-revalidate</con:value></con:header><con:header><con:name>Vary</con:name><con:value>Origin</con:value></con:header><con:header><con:name>Vary</con:name><con:value>Access-Control-Request-Method</con:value></con:header><con:header><con:name>Vary</con:name><con:value>Access-Control-Request-Headers</con:value></con:header><con:header><con:name>Expires</con:name><con:value>0</con:value></con:header><con:header><con:name>X-XSS-Protection</con:name><con:value>1; mode=block</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="//api/contactos/999" method="GET" resourcePath="//api/contactos/999" id="7f5c1da8-ac04-43c9-966d-b232d6083e01"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="bd1c079c-7843-4072-af9b-6ed4494a593d" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{"error":"Not found","message":"/api/contactos/999"}</con:responseContent><con:header><con:name>Transfer-Encoding</con:name><con:value>chunked</con:value></con:header><con:header><con:name>Keep-Alive</con:name><con:value>timeout=60</con:value></con:header><con:header><con:name>X-Content-Type-Options</con:name><con:value>nosniff</con:value></con:header><con:header><con:name>Connection</con:name><con:value>keep-alive</con:value></con:header><con:header><con:name>Pragma</con:name><con:value>no-cache</con:value></con:header><con:header><con:name>Date</con:name><con:value>Wed, 15 Dec 2021 12:01:46 GMT</con:value></con:header><con:header><con:name>X-Frame-Options</con:name><con:value>DENY</con:value></con:header><con:header><con:name>Cache-Control</con:name><con:value>no-cache, no-store, max-age=0, must-revalidate</con:value></con:header><con:header><con:name>Vary</con:name><con:value>Origin</con:value></con:header><con:header><con:name>Vary</con:name><con:value>Access-Control-Request-Method</con:value></con:header><con:header><con:name>Vary</con:name><con:value>Access-Control-Request-Headers</con:value></con:header><con:header><con:name>Expires</con:name><con:value>0</con:value></con:header><con:header><con:name>X-XSS-Protection</con:name><con:value>1; mode=block</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties><con:property><con:name>urlbase</con:name><con:value>http://localhost:8008</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>