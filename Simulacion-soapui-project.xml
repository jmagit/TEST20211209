<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="369aef80-e554-4109-a976-bf2e66d51281" activeEnvironment="Default" name="Simulacion" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="3cfd0a68-2a17-4172-9fae-7db6390c2125" wadlVersion="http://wadl.dev.java.net/2009/02" name="Microservicio: Contactos" type="rest" basePath="/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Ejemplo de Microservicio utilizando la base de datos **mongodb**.</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://JAVIER-LAPTOP:8089/</con:endpoint><con:endpoint>http://localhost:8008</con:endpoint><con:endpoint>http://localhost:8089/</con:endpoint></con:endpoints><con:resource name="/api/contactos" path="api/contactos" id="469ed0f2-0f73-4304-90e3-0c294c618a0f"><con:settings/><con:parameters/><con:method name="getAllUsingGET" id="8721f0ba-922f-4293-a58b-7165f3a2a491" method="GET"><con:description>
Listar todos</con:description><con:settings/><con:parameters><con:parameter><con:name>_page</con:name><con:style>QUERY</con:style><con:description>_page</con:description></con:parameter><con:parameter><con:name>_rows</con:name><con:style>QUERY</con:style><con:description>_rows</con:description></con:parameter><con:parameter><con:name>_sort</con:name><con:style>QUERY</con:style><con:description>_sort</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="4a0f040d-a826-496f-9746-1b12826eb25c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089/</con:endpoint><con:request/><con:originalUri>http://localhost//api/contactos</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="addUsingPOST" id="94b38477-ebe3-400f-b0be-fa9255da1cec" method="POST"><con:description>
add</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="bc2403d2-c4c7-4d6e-8b5e-f2f4dae726b5" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8008</con:endpoint><con:parameters/></con:request></con:method></con:resource><con:resource name="/api/contactos/{id}" path="/api/contactos/{id}" id="596ec41b-2328-4016-8c22-cfba99ead8eb"><con:settings/><con:parameters/><con:method name="getOneUsingGET" id="5af58d5a-2627-4147-9568-9ed74ee54997" method="GET"><con:description>
getOne</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>id</con:name><con:style>TEMPLATE</con:style><con:description>id</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:request name="Request 1" id="3de0fbef-c985-4693-a6ee-1667e661a482" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8008</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="modifyUsingPUT" id="1e4e9504-8d28-4913-90c4-91e993d164d3" method="PUT"><con:description>
modify</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>id</con:name><con:style>TEMPLATE</con:style><con:description>id</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>201</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>403</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>404</con:status><con:params/></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="efeafa27-7744-41de-9b89-e345697dcf30" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://localhost:8008</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="deleteUsingDELETE" id="bd986d76-c417-4441-a55d-ccf57532d695" method="DELETE"><con:description>
delete</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>id</con:name><con:style>TEMPLATE</con:style><con:description>id</con:description></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>204</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>401</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>*/*</con:mediaType><con:status>403</con:status><con:params/></con:representation><con:request name="Request 1" id="2f5da7e5-c63d-42df-92e7-029810037e76" mediaType="application/json"><con:settings/><con:endpoint>http://localhost:8008</con:endpoint><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="09b3421a-e093-4d38-a99e-f9d922db9c00" port="8089" path="/" host="JAVIER-LAPTOP" name="Simulacion de contactos"><con:settings/><con:properties/><con:restMockAction name="//api/contactos" method="GET" resourcePath="//api/contactos" id="c5a24c88-77c8-40b4-8f95-2b1e5e7cc9ce"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="d6fd28c5-0489-4c3e-b1ec-4a522e6a418f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent><![CDATA[[{
  "id": 1,
  "nombre": "Esta es una simulacion",
  "apellidos": "Kohen",
  "email": "kkohen0@nature.com",
  "conflictivo": true,
  "avatar": "https://robohash.org/sedcorruptinobis.png?size=50x50&set=set1",
  "genero": "Polygender"
}, {
  "id": 2,
  "nombre": "Cecilla",
  "apellidos": "Galilee",
  "email": "cgalilee1@psu.edu",
  "conflictivo": false,
  "avatar": "https://robohash.org/estinnisi.png?size=50x50&set=set1",
  "genero": "Genderfluid"
}, {
  "id": 3,
  "nombre": "Pepito",
  "apellidos": "Habron",
  "email": "phabron2@ehow.com",
  "conflictivo": true,
  "avatar": "https://robohash.org/sedeumnon.png?size=50x50&set=set1",
  "genero": "Polygender"
}, {
  "id": 4,
  "nombre": "Murdoch",
  "apellidos": "De Bruyn",
  "email": "mdebruyn3@fda.gov",
  "conflictivo": false,
  "avatar": "https://robohash.org/eaimpeditalias.png?size=50x50&set=set1",
  "genero": "Non-binary"
}, {
  "id": 5,
  "nombre": "Tedman",
  "apellidos": "Durward",
  "email": "tdurward4@tuttocitta.it",
  "conflictivo": true,
  "avatar": "https://robohash.org/uterrorimpedit.png?size=50x50&set=set1",
  "genero": "Agender"
}, {
  "id": 6,
  "nombre": "Eldin",
  "apellidos": "Bettinson",
  "email": "ebettinson5@usa.gov",
  "conflictivo": true,
  "avatar": "https://robohash.org/sintconsequaturratione.png?size=50x50&set=set1",
  "genero": "Agender"
}, {
  "id": 7,
  "nombre": "Shirleen",
  "apellidos": "Vedyaev",
  "email": "svedyaev6@feedburner.com",
  "conflictivo": true,
  "avatar": "https://robohash.org/commodiipsamnatus.png?size=50x50&set=set1",
  "genero": "Polygender"
}, {
  "id": 8,
  "nombre": "Perrine",
  "apellidos": "Banat",
  "email": "pbanat7@wordpress.org",
  "conflictivo": true,
  "avatar": "https://robohash.org/evenietearumautem.png?size=50x50&set=set1",
  "genero": "Bigender"
}, {
  "id": 9,
  "nombre": "Mirna",
  "apellidos": "Brammall",
  "email": "mbrammall8@google.de",
  "conflictivo": true,
  "avatar": "https://robohash.org/autemaspernaturdolorem.png?size=50x50&set=set1",
  "genero": "Male"
}, {
  "id": 10,
  "nombre": "Fanechka",
  "apellidos": "Tramel",
  "email": "ftramel9@seesaa.net",
  "conflictivo": false,
  "avatar": "https://robohash.org/delectusameteius.png?size=50x50&set=set1",
  "genero": "Bigender"
}]
]]></con:responseContent></con:response><con:response name="Response 2" id="1d34d3e0-39e0-46ff-999d-8a92132c4d04" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent><![CDATA[[{
  "id": 1,
  "nombre": "Renelle",
  "apellidos": "Petronis",
  "email": "rpetronis0@trellian.com",
  "conflictivo": true,
  "avatar": "https://robohash.org/errorfugiatcorporis.png?size=50x50&set=set1",
  "genero": "Non-binary"
}, {
  "id": 2,
  "nombre": "Corbett",
  "apellidos": "Saker",
  "email": "csaker1@usgs.gov",
  "conflictivo": false,
  "avatar": "https://robohash.org/excepturipraesentiumea.png?size=50x50&set=set1",
  "genero": "Agender"
}, {
  "id": 3,
  "nombre": "Isidore",
  "apellidos": "Bartkiewicz",
  "email": "ibartkiewicz2@state.tx.us",
  "conflictivo": false,
  "avatar": "https://robohash.org/maximealiquamsequi.png?size=50x50&set=set1",
  "genero": "Genderqueer"
}, {
  "id": 4,
  "nombre": "Midge",
  "apellidos": "Peres",
  "email": "mperes3@live.com",
  "conflictivo": false,
  "avatar": "https://robohash.org/rationefugiatautem.png?size=50x50&set=set1",
  "genero": "Non-binary"
}, {
  "id": 5,
  "nombre": "Ramonda",
  "apellidos": "Josham",
  "email": "rjosham4@weather.com",
  "conflictivo": false,
  "avatar": "https://robohash.org/temporenisiut.png?size=50x50&set=set1",
  "genero": "Polygender"
}, {
  "id": 6,
  "nombre": "Karil",
  "apellidos": "Landrean",
  "email": "klandrean5@slideshare.net",
  "conflictivo": true,
  "avatar": "https://robohash.org/sapientenontotam.png?size=50x50&set=set1",
  "genero": "Genderqueer"
}, {
  "id": 7,
  "nombre": "Staffard",
  "apellidos": "Storch",
  "email": "sstorch6@geocities.jp",
  "conflictivo": true,
  "avatar": "https://robohash.org/minimafugaet.png?size=50x50&set=set1",
  "genero": "Male"
}, {
  "id": 8,
  "nombre": "Layney",
  "apellidos": "Kestian",
  "email": "lkestian7@google.com.hk",
  "conflictivo": false,
  "avatar": "https://robohash.org/ipsammolestiaesoluta.png?size=50x50&set=set1",
  "genero": "Agender"
}, {
  "id": 9,
  "nombre": "Nancee",
  "apellidos": "Becken",
  "email": "nbecken8@yellowpages.com",
  "conflictivo": false,
  "avatar": "https://robohash.org/adnullavoluptatem.png?size=50x50&set=set1",
  "genero": "Agender"
}, {
  "id": 10,
  "nombre": "Rowan",
  "apellidos": "Folley",
  "email": "rfolley9@businessweek.com",
  "conflictivo": false,
  "avatar": "https://robohash.org/harumnostrumet.png?size=50x50&set=set1",
  "genero": "Non-binary"
}]
]]></con:responseContent></con:response></con:restMockAction><con:restMockAction name="//api/contactos" method="POST" resourcePath="//api/contactos" id="e9ff9e42-65e6-4792-baf8-a0dd98ad824d"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="64489e22-9e4b-42e4-8c24-75d4469ab7fb" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="//api/contactos/1" method="GET" resourcePath="//api/contactos/1" id="9ace5529-95ec-4f1f-81b3-3a3854e27931"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="1e6b250e-ed22-485a-8858-0b00d10e12e5" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "id": 1,
  "nombre": "Renelle",
  "apellidos": "Petronis",
  "email": "rpetronis0@trellian.com",
  "conflictivo": true,
  "avatar": "https://robohash.org/errorfugiatcorporis.png?size=50x50&amp;set=set1",
  "genero": "Non-binary"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="//api/contactos/" method="PUT" resourcePath="//api/contactos/" id="ddd6c95d-d34e-427e-b76b-eb83155ea91a"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="5761512e-3272-4b99-a516-7008bf3fe6e9" httpResponseStatus="200"><con:settings/></con:response></con:restMockAction><con:restMockAction name="//api/contactos/" method="DELETE" resourcePath="//api/contactos/1" id="ed2da549-1576-4f10-a62a-6ee7505d8f08"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="91c032ef-aa73-42e1-9b64-2fe4e7933496" httpResponseStatus="204"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="//api/contactos/" method="GET" resourcePath="//api/contactos/2" id="92ff2f65-abbf-4f04-920e-6d5030bbc96c"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="3550ed3d-c492-4555-bad4-d2b73a986dd2" httpResponseStatus="401" mediaType="application/json"><con:settings/><con:responseContent>{
"id": 2,
"nombre": "Cecilla",
"apellidos": "Galilee",
"email": "cgalilee1@psu.edu",
"conflictivo": false,
"avatar": "https://robohash.org/estinnisi.png?size=50x50&amp;set=set1",
"genero": "Genderfluid"
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="//api/contactos/666" method="GET" resourcePath="//api/contactos/666" id="a750f5f2-7c6a-48e6-97e9-8593d974b5d0"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="a341eac5-9614-44e4-8b0f-3061935e8b67" httpResponseStatus="404"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="/direcciones" method="GET" resourcePath="/direcciones" id="2346e274-1529-416d-a5d2-96ad9e8cbe01"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>